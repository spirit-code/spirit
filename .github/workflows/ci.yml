name: CI

on: [push, pull_request]

jobs:

  lint:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_ENABLE_PINNING=ON -DSPIRIT_ENABLE_DEFECTS=ON
      SOURCES: "find core/include/ core/src/ ui-cpp/utility/ ui-cpp/ui-imgui/include/ ui-cpp/ui-imgui/src/ -iname *.hpp -o -iname *.cpp"

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install required system packages
      run: |
        wget --no-verbose -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main"
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev clang-format-15 clang-tidy-15

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üß™ clang-format linting
      if: always()
      shell: bash
      run: |
        clang-format-15 --version
        OUTPUT=$($SOURCES | xargs clang-format-15 -n 2>&1)
        if [[ $OUTPUT ]]; then
          echo "$OUTPUT"
          exit 1
        fi

    - name: üß™ clang-tidy linting
      if: always()
      shell: bash
      run: |
        clang-tidy-15 --version

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: üìö Install python packages
      run: pip install --user numpy pylint black

    - name: üß™ Python code formatting check
      shell: bash
      run: |
        black core/python --check
        black ui-python --check

    - name: üß™ Python code quality checks, linting
      shell: bash
      run: pylint core/python/spirit --fail-under=8

  test-gcc:
    name: gcc ${{ matrix.parallelisation }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: ubuntu-22.04
            parallelisation: "openmp"
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF
      OMP_NUM_THREADS: 4

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install required system packages
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      if: matrix.parallelisation == ''
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: ‚öô Configure with OpenMP
      if: matrix.parallelisation == 'openmp'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSPIRIT_USE_OPENMP=ON $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE --rerun-failed --output-on-failure

  test-clang:
    name: clang ${{ matrix.parallelisation }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            parallelisation: ""
          - os: ubuntu-22.04
            parallelisation: "openmp"
          - os: ubuntu-22.04
            parallelisation: "cuda"
          - os: macos-13
            parallelisation: ""
          - os: macos-13
            parallelisation: "openmp"
          - os: windows-2022
            parallelisation: ""
          - os: windows-2022
            parallelisation: "openmp"
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF
      OMP_NUM_THREADS: 4

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install LLVM and some libs (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      shell: bash
      run: |
        sudo apt-get --purge remove "clang*"
        wget --no-verbose -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main"
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev clang-16 lldb-16 lld-16 libomp-16-dev
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 16
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 16

    - name: üìö Install NVIDIA HPC SDK
      if: matrix.parallelisation == 'cuda'
      shell: bash
      run: |
        curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
        echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
        sudo apt update -y
        sudo apt install -y nvhpc-23-3
        echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/compilers/bin" >> $GITHUB_PATH
        echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/comm_libs/mpi/bin" >> $GITHUB_PATH

    - name: üìö Install LLVM (MacOS)
      if: matrix.os == 'macos-13'
      shell: bash
      run: |
        brew update
        brew install llvm
        echo "/usr/local/opt/llvm/bin" >> $GITHUB_PATH
        echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH

    - name: üìö Install LLVM and Ninja (Windows)
      if: matrix.os == 'windows-2022'
      shell: pwsh
      run: |
        choco install llvm ninja -y
        choco upgrade llvm
        "CMAKE_FLAGS=$env:CMAKE_FLAGS -G Ninja" >> $env:GITHUB_ENV

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      if: matrix.parallelisation == ''
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: ‚öô Configure with CUDA
      if: matrix.parallelisation == 'cuda'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/cuda/

    - name: ‚öô Configure with OpenMP
      if: matrix.parallelisation == 'openmp'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_OPENMP=ON

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      if: matrix.parallelisation != 'cuda'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE --rerun-failed --output-on-failure

  test-nvcpp:
    name: nvcpp ${{ matrix.parallelisation }} (ubuntu-22.04)
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - parallelisation: ""
          - parallelisation: "openmp"
          - parallelisation: "cuda"
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DCMAKE_CXX_COMPILER=nvc++ -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF
      OMP_NUM_THREADS: 4

    steps:
    - uses: actions/checkout@v3

    - name: Force downgrade to gcc-10 on Ubuntu 22.04 to avoid a bug in gcc-11.3 header
      if: matrix.config.os == 'ubuntu-22.04'
      shell: bash
      run: |
        sudo apt-get --purge remove "g++*"
        sudo apt install g++-10
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

    - name: üìö Install NVIDIA HPC SDK and some libs
      shell: bash
      run: |
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev
        curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
        echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
        sudo apt update -y
        sudo apt install -y nvhpc-23-3

    - name: ‚öô Configure environment
      shell: bash
      run: |
        echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/compilers/bin" >> $GITHUB_PATH
        echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/comm_libs/mpi/bin" >> $GITHUB_PATH

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      if: matrix.parallelisation == ''
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: ‚öô Configure with OpenMP
      if: matrix.parallelisation == 'openmp'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_OPENMP=ON

    - name: ‚öô Configure with CUDA
      if: matrix.parallelisation == 'cuda'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/cuda/

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      if: matrix.parallelisation != 'cuda'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE --rerun-failed --output-on-failure


  test-other-configurations:
    name: test-${{ matrix.configuration }} (ubuntu-22.04)
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - configuration: "debug"
            build-type: Debug
            excludetests: solver
          - configuration: "coverage"
            build-type: Debug
          - configuration: "single-precision"
            build-type: Release
          - configuration: "pinning-and-defects"
            build-type: Release
    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      CMAKE_FLAGS: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF
      OMP_NUM_THREADS: 4

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: üìö Install required system packages
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure debug build
      if: matrix.configuration == 'debug'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: ‚öô Configure coverage build
      if: matrix.configuration == 'coverage'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSPIRIT_TEST_COVERAGE=ON $CMAKE_FLAGS

    - name: ‚öô Configure single-precision build
      if: matrix.configuration == 'single-precision'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSPIRIT_SCALAR_TYPE="float" $CMAKE_FLAGS

    - name: ‚öô Configure pinning-and-defects build
      if: matrix.configuration == 'pinning-and-defects'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSPIRIT_ENABLE_PINNING=ON -DSPIRIT_ENABLE_DEFECTS=ON $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install necessary packages
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy coverage 'coveralls<3' wheel
        sudo apt update
        sudo apt install lcov

    - name: üß™ Test (non-coverage)
      if: matrix.configuration != 'coverage'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE -E ${{ matrix.excludetests }} --rerun-failed --output-on-failure

    - name: üß™ Generate C++ coverage
      if: matrix.configuration == 'coverage'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        lcov -c -i --no-external --directory . --base-directory $GITHUB_WORKSPACE/core -o baseline.info
        make test
        lcov -c --no-external --directory . --base-directory $GITHUB_WORKSPACE/core -o after_test.info
        lcov -a baseline.info -a after_test.info -o total_test.info
        lcov -r total_test.info \*thirdparty\* \*/test/\* \*Collection\* \*DLL_\* -o coverage.info

    - name: ‚¨Ü Upload C++ coverage
      if: matrix.configuration == 'coverage'
      uses: codecov/codecov-action@v1
      with:
        files: ${{runner.workspace}}/build/coverage.info

    - name: üß™ Python API coverage
      if: matrix.configuration == 'coverage'
      working-directory: ./core/python
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        coverage run --source spirit --omit=spirit/spiritlib.py setup.py test > cov.txt
        head cov.txt
        coverage report -m
        coverage xml
        coveralls

  webapp-mobile:
    runs-on: ubuntu-22.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_BUILD_FOR_JS=ON
      EMSCRIPTEN_VERSION: "3.1.38"

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install Emscripten
      working-directory: ${{runner.workspace}}
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DCMAKE_TOOLCHAIN_FILE=${{runner.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake --build . --config $BUILD_TYPE -j 2

    - name: üì¶ Archive mobile web app
      uses: actions/upload-artifact@v2
      with:
        name: webapp-mobile
        path: ui-web/

  webapp-desktop:
    runs-on: ubuntu-22.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_BUILD_FOR_JS=ON
      EMSCRIPTEN_VERSION: "3.1.38"

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install Emscripten
      working-directory: ${{runner.workspace}}
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DCMAKE_TOOLCHAIN_FILE=${{runner.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake --build . --config $BUILD_TYPE -j 2

    - name: üì¶ Archive desktop web app
      uses: actions/upload-artifact@v2
      with:
        name: webapp-desktop
        path: ui-cpp/ui-imgui/webapp/
