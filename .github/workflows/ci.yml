name: CI

on: [push, pull_request]

jobs:

  test:
    runs-on: ${{ matrix.os }}
    name: test${{ matrix.name-suffix }} (${{ matrix.os }}, ${{ matrix.build-type }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] #, macos-latest, windows-latest] ### CANNOT BUILD ON APPLE-CLANG OR MSVC YET
        build-type: [Release, Debug]
        name-suffix: [""]
        openmp: [false]
        single-precision: [false]
        include:
          - build-type: Debug
            excludetests: solver
          - openmp: true
            name-suffix: "-openmp"
            os: ubuntu-latest
            build-type: Release
          # - openmp: true ### CANNOT BUILD ON APPLE-CLANG YET
          #   name-suffix: "-openmp"
          #   os: macos-latest
          #   build-type: Release
          # - openmp: true ### CANNOT BUILD ON MSVC YET
          #   name-suffix: "-openmp"
          #   os: windows-latest
          #   build-type: Release
          - single-precision: true
            name-suffix: "-single-precision"
            os: ubuntu-latest
            build-type: Release
          # - single-precision: true ### CANNOT BUILD ON APPLE-CLANG YET
          #   name-suffix: "-single-precision"
          #   os: macos-latest
          #   build-type: Release
          # - single-precision: true ### CANNOT BUILD ON MSVC YET
          #   name-suffix: "-single-precision"
          #   os: windows-latest
          #   build-type: Release
    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF
      OMP_NUM_THREADS: 4
      EXCLUDETESTS: ${{ matrix.excludetests }}

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install required system packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Install LLVM (for OpenMP) on macOS
      if: matrix.openmp == true && matrix.os == 'macos-latest'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        brew install llvm
        echo "$(brew --prefix llvm)/bin/" >> $GITHUB_PATH

    - name: ‚öô Install LLVM and Ninja (for OpenMP) on Windows
      if: matrix.openmp == true && matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{runner.workspace}}/build
      run: |
        choco install llvm ninja -y
        "CMAKE_FLAGS=$env:CMAKE_FLAGS -G Ninja" >> $env:GITHUB_ENV

    - name: ‚öô Configure with OpenMP
      if: matrix.openmp == true && matrix.single-precision == false
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DSPIRIT_USE_OPENMP=ON $CMAKE_FLAGS

    - name: ‚öô Configure with single-precision
      if: matrix.openmp == false && matrix.single-precision == true
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSPIRIT_SCALAR_TYPE="float" $CMAKE_FLAGS

    - name: ‚öô Configure
      if: matrix.openmp == false && matrix.single-precision == false
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE -E $EXCLUDETESTS --rerun-failed --output-on-failure

  test-coverage:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_TEST_COVERAGE=ON

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config Release -j 2

    - name: üìö Install necessary packages
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy coverage 'coveralls<3' wheel
        sudo apt update
        sudo apt install lcov

    - name: üß™ Generate C++ coverage
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        lcov -c -i --no-external --directory . --base-directory $GITHUB_WORKSPACE/core -o baseline.info
        make test
        lcov -c --no-external --directory . --base-directory $GITHUB_WORKSPACE/core -o after_test.info
        lcov -a baseline.info -a after_test.info -o total_test.info
        lcov -r total_test.info \*thirdparty\* \*/test/\* \*Collection\* \*DLL_\* -o coverage.info
    - name: ‚¨Ü Upload C++ coverage
      uses: codecov/codecov-action@v1
      with:
        files: ${{runner.workspace}}/build/coverage.info

    - name: üß™ Python API coverage
      working-directory: ./core/python
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        coverage run --source spirit --omit=spirit/spiritlib.py setup.py test > cov.txt
        head cov.txt
        coverage report -m
        coverage xml
        coveralls

  test-pinning-defects:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_ENABLE_PINNING=ON -DSPIRIT_ENABLE_DEFECTS=ON

    steps:
    - uses: actions/checkout@v3

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE --output-on-failure

  lint:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_ENABLE_PINNING=ON -DSPIRIT_ENABLE_DEFECTS=ON
      SOURCES: "find core/include/ core/src/ ui-cpp/utility/ ui-cpp/ui-imgui/include/ ui-cpp/ui-imgui/src/ -iname *.hpp -o -iname *.cpp"

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install required system packages
      run: |
        wget --no-verbose -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main"
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev clang-format-15 clang-tidy-15

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: üß™ clang-format linting
      if: always()
      shell: bash
      run: |
        clang-format-15 --version
        OUTPUT=$($SOURCES | xargs clang-format-15 -n 2>&1)
        if [[ $OUTPUT ]]; then
          echo "$OUTPUT"
          exit 1
        fi

    - name: üß™ clang-tidy linting
      if: always()
      shell: bash
      run: |
        clang-tidy-15 --version

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: üìö Install python packages
      run: pip install --user numpy pylint black

    - name: üß™ Python code formatting check
      shell: bash
      run: |
        black core/python --check
        black ui-python --check

    - name: üß™ Python code quality checks, linting
      shell: bash
      run: pylint core/python/spirit --fail-under=8

  test-clang:
    runs-on: ubuntu-22.04
    name: clang${{ matrix.name-suffix }} (ubuntu-22.04)
    strategy:
      fail-fast: false
      matrix:
        name-suffix: [""]
        parallelisation: ["none"]
        include:
          - parallelisation: "cuda"
            name-suffix: "-cuda"
          - parallelisation: "openmp"
            name-suffix: "-openmp"
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install LLVM and some libs
      shell: bash
      run: |
        wget --no-verbose -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main"
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev clang-16 lldb-16 lld-16

    - name: üìö Install NVIDIA HPC SDK
      if: matrix.parallelisation == 'cuda'
      shell: bash
      run: |
        curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
        echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
        sudo apt update -y
        sudo apt install -y nvhpc-23-3

    - name: ‚öô Configure environment
      if: matrix.parallelisation == 'cuda'
      shell: bash
      run: |
        echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/compilers/bin" >> $GITHUB_PATH
        echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/comm_libs/mpi/bin" >> $GITHUB_PATH

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      if: matrix.parallelisation == 'none'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: ‚öô Configure with CUDA
      if: matrix.parallelisation == 'cuda'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/cuda/

    - name: ‚öô Configure with OpenMP
      if: matrix.parallelisation == 'openmp'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_OPENMP=ON

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      if: matrix.parallelisation != 'cuda'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE -E $EXCLUDETESTS --rerun-failed --output-on-failure

  test-nvcpp:
    runs-on: ubuntu-22.04
    name: nvcpp${{ matrix.name-suffix }} (ubuntu-22.04)
    strategy:
      fail-fast: false
      matrix:
        name-suffix: [""]
        parallelisation: ["none"]
        include:
          - parallelisation: "cuda"
            name-suffix: "-cuda"
          - parallelisation: "openmp"
            name-suffix: "-openmp"
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF -DCMAKE_CXX_COMPILER=nvc++

    steps:
    - uses: actions/checkout@v3

    - name: Force downgrade to gcc-10 on Ubuntu 22.04 to avoid a bug in gcc-11.3 header
      if: matrix.config.os == 'ubuntu-22.04'
      shell: bash
      run: |
        sudo apt-get --purge remove "g++*"
        sudo apt install g++-10
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

    - name: üìö Install NVIDIA HPC SDK and some libs
      shell: bash
      run: |
        sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev
        curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
        echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
        sudo apt update -y
        sudo apt install -y nvhpc-23-3

    - name: ‚öô Configure environment
      shell: bash
      run: |
        echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/compilers/bin" >> $GITHUB_PATH
        echo "/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/comm_libs/mpi/bin" >> $GITHUB_PATH

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      if: matrix.parallelisation == 'none'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: ‚öô Configure with CUDA
      if: matrix.parallelisation == 'cuda'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/23.3/cuda/

    - name: ‚öô Configure with OpenMP
      if: matrix.parallelisation == 'openmp'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DSPIRIT_USE_OPENMP=ON

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: üìö Install python packages
      run: pip install --user numpy

    - name: üß™ Test
      if: matrix.parallelisation != 'cuda'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE -E $EXCLUDETESTS --rerun-failed --output-on-failure

  ### CANNOT BUILD ON NVCC
  # build-cuda:
  #   runs-on: ${{ matrix.config.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       config:
  #         - os: ubuntu-22.04
  #         - os: ubuntu-20.04
  #         - os: ubuntu-18.04
  #   env:
  #     BUILD_TYPE: Release
  #     CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_USE_CUDA=ON -DSPIRIT_CUDA_ARCH=sm_70

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Force downgrade to gcc-10 on Ubuntu 22.04 to avoid a bug in gcc-11.3 header
  #     if: matrix.config.os == 'ubuntu-22.04'
  #     shell: bash
  #     run: |
  #       sudo apt-get --purge remove "g++*"
  #       sudo apt install g++-10
  #       sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
  #       sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

  #   - name: üìö Install CUDA
  #     shell: bash
  #     run: |
  #       sudo apt update
  #       sudo apt install nvidia-cuda-toolkit

  #   - name: üìÅ Create build folder
  #     run: cmake -E make_directory ${{runner.workspace}}/build

  #   - name: ‚öô Configure
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

  #   - name: üõ† Build
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: cmake --build . --config $BUILD_TYPE -j 2

  ### I don't feel like getting C++20 running on Ubuntu 18
  # build-ui-qt:
  #   runs-on: ubuntu-18.04
  #   env:
  #     BUILD_TYPE: Release
  #     CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=ON

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: üìö Install Qt5
  #     run: |
  #       sudo apt update
  #       sudo apt install qt5-default libqt5charts5-dev

  #   - name: üìÅ Create build folder
  #     run: cmake -E make_directory ${{runner.workspace}}/build

  #   - name: ‚öô Configure
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

  #   - name: üõ† Build
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: cmake --build . --config $BUILD_TYPE -j 2

  webapp-mobile:
    runs-on: ubuntu-22.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_BUILD_FOR_JS=ON
      EMSCRIPTEN_VERSION: "3.1.38"

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install Emscripten
      working-directory: ${{runner.workspace}}
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DCMAKE_TOOLCHAIN_FILE=${{runner.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake --build . --config $BUILD_TYPE -j 2

    - name: üì¶ Archive mobile web app
      uses: actions/upload-artifact@v2
      with:
        name: webapp-mobile
        path: ui-web/

  webapp-desktop:
    runs-on: ubuntu-22.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_BUILD_FOR_JS=ON
      EMSCRIPTEN_VERSION: "3.1.38"

    steps:
    - uses: actions/checkout@v3

    - name: üìö Install Emscripten
      working-directory: ${{runner.workspace}}
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION

    - name: üìÅ Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ‚öô Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS -DCMAKE_TOOLCHAIN_FILE=${{runner.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

    - name: üõ† Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake --build . --config $BUILD_TYPE -j 2

    - name: üì¶ Archive desktop web app
      uses: actions/upload-artifact@v2
      with:
        name: webapp-desktop
        path: ui-cpp/ui-imgui/webapp/

  # Cannot yet get it running cross-platform with C++20 and all
  # deploy-pypi:
  #   if: github.event_name != 'pull_request'
  #   needs: [test, lint]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   env:
  #     BUILD_TYPE: Release
  #     CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=OFF -DSPIRIT_UI_CXX_USE_QT=OFF
  #     SPIRIT_ADD_VERSION_SUFFIX: true

  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.x'

  #   - name: ‚öô Configure environment
  #     shell: bash
  #     if: github.ref == 'refs/heads/master'
  #     run: echo "SPIRIT_ADD_VERSION_SUFFIX=false" >> $GITHUB_ENV

  #   - name: üìÅ Create build folder
  #     run: cmake -E make_directory ${{runner.workspace}}/build

  #   - name: ‚öô Configure
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

  #   - name: üõ† Build
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: cmake --build . --config $BUILD_TYPE -j 2

  #   - name: üìö Install necessary packages
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install numpy setuptools wheel twine

  #   - name: üõ† Build Python package
  #     shell: bash
  #     working-directory: ./core/python
  #     run: |
  #       echo "Python package build"
  #       echo "Add suffix to spirit version tag for python package $SPIRIT_ADD_VERSION_SUFFIX"
  #       python setup.py sdist bdist_wheel

  #   - name: üöÄ Deploy to TestPyPI
  #     working-directory: ./core/python
  #     env:
  #       TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #       TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #     if: github.ref != 'refs/heads/master'
  #     run: twine upload --skip-existing --repository testpypi dist/*

  #   - name: üöÄ Deploy to PyPI
  #     working-directory: ./core/python
  #     env:
  #       TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #       TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #     if: github.ref == 'refs/heads/master'
  #     run: twine upload --skip-existing dist/*

  # deploy-package:
  #   if: github.event_name != 'pull_request'
  #   needs: [test, lint]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   env:
  #     BUILD_TYPE: Release
  #     CMAKE_FLAGS: -DSPIRIT_UI_USE_IMGUI=ON -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_BUNDLE_APP=ON

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: üìö Install required system packages
  #     if: matrix.os == 'ubuntu-latest'
  #     run: |
  #       sudo apt update
  #       sudo apt install xorg-dev libglu1-mesa-dev libgtk-3-dev

  #   - name: üìÅ Create build folder
  #     run: cmake -E make_directory ${{runner.workspace}}/build

  #   - name: ‚öô Configure
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

  #   - name: üõ† Build
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: |
  #       cmake --build . --config $BUILD_TYPE -j 2
  #       cmake --install .
  #       cmake --build . --config $BUILD_TYPE -j 2 --target package

  #   - name: üì¶ Archive ubuntu package
  #     if: matrix.os == 'ubuntu-latest'
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: spirit-ubuntu
  #       path: |
  #         ${{runner.workspace}}/build/*.tar.gz

  #   - name: üì¶ Archive macOS package
  #     if: matrix.os == 'macos-latest'
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: spirit-macos
  #       path: |
  #         ${{runner.workspace}}/build/*.dmg
  #         ${{runner.workspace}}/build/install/README.md
  #         ${{runner.workspace}}/build/install/LICENSE.txt
  #         ${{runner.workspace}}/build/install/VERSION.txt
  #         ${{runner.workspace}}/build/install/licenses/

  #   - name: üì¶ Archive windows package
  #     if: matrix.os == 'windows-latest'
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: spirit-windows
  #       path: |
  #         ${{runner.workspace}}/build/*.zip

  # draft-release:
  #   if: github.event_name == 'push' && startsWith( github.ref, 'refs/tags/' )
  #   needs: [test, lint, webapp-mobile, webapp-desktop, deploy-package]
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: üìÑ Generate a changelog
  #     id: changelog
  #     uses: metcalfc/changelog-generator@v1.0.0
  #     with:
  #       myToken: ${{ secrets.GITHUB_TOKEN }}

  #   - name: üìÑ Print the changelog
  #     run: echo "${{ steps.changelog.outputs.changelog }}"

  #   - name: üéâ Create draft release
  #     id: draft_release
  #     uses: actions/create-release@v1
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       body: ${{ steps.changelog.outputs.changelog }}
  #       draft: true